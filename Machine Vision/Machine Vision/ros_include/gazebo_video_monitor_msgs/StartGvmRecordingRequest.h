// Generated by gencpp from file gazebo_video_monitor_msgs/StartGvmRecordingRequest.msg
// DO NOT EDIT!


#ifndef GAZEBO_VIDEO_MONITOR_MSGS_MESSAGE_STARTGVMRECORDINGREQUEST_H
#define GAZEBO_VIDEO_MONITOR_MSGS_MESSAGE_STARTGVMRECORDINGREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gazebo_video_monitor_msgs
{
template <class ContainerAllocator>
struct StartGvmRecordingRequest_
{
  typedef StartGvmRecordingRequest_<ContainerAllocator> Type;

  StartGvmRecordingRequest_()
    : disable_window(false)
    , world_as_main_view(false)  {
    }
  StartGvmRecordingRequest_(const ContainerAllocator& _alloc)
    : disable_window(false)
    , world_as_main_view(false)  {
  (void)_alloc;
    }



   typedef uint8_t _disable_window_type;
  _disable_window_type disable_window;

   typedef uint8_t _world_as_main_view_type;
  _world_as_main_view_type world_as_main_view;





  typedef boost::shared_ptr< ::gazebo_video_monitor_msgs::StartGvmRecordingRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gazebo_video_monitor_msgs::StartGvmRecordingRequest_<ContainerAllocator> const> ConstPtr;

}; // struct StartGvmRecordingRequest_

typedef ::gazebo_video_monitor_msgs::StartGvmRecordingRequest_<std::allocator<void> > StartGvmRecordingRequest;

typedef boost::shared_ptr< ::gazebo_video_monitor_msgs::StartGvmRecordingRequest > StartGvmRecordingRequestPtr;
typedef boost::shared_ptr< ::gazebo_video_monitor_msgs::StartGvmRecordingRequest const> StartGvmRecordingRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gazebo_video_monitor_msgs::StartGvmRecordingRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gazebo_video_monitor_msgs::StartGvmRecordingRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gazebo_video_monitor_msgs::StartGvmRecordingRequest_<ContainerAllocator1> & lhs, const ::gazebo_video_monitor_msgs::StartGvmRecordingRequest_<ContainerAllocator2> & rhs)
{
  return lhs.disable_window == rhs.disable_window &&
    lhs.world_as_main_view == rhs.world_as_main_view;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gazebo_video_monitor_msgs::StartGvmRecordingRequest_<ContainerAllocator1> & lhs, const ::gazebo_video_monitor_msgs::StartGvmRecordingRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gazebo_video_monitor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gazebo_video_monitor_msgs::StartGvmRecordingRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gazebo_video_monitor_msgs::StartGvmRecordingRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gazebo_video_monitor_msgs::StartGvmRecordingRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gazebo_video_monitor_msgs::StartGvmRecordingRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gazebo_video_monitor_msgs::StartGvmRecordingRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gazebo_video_monitor_msgs::StartGvmRecordingRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gazebo_video_monitor_msgs::StartGvmRecordingRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "74a62fa060bc26d4ef1f8e73a79a72f6";
  }

  static const char* value(const ::gazebo_video_monitor_msgs::StartGvmRecordingRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x74a62fa060bc26d4ULL;
  static const uint64_t static_value2 = 0xef1f8e73a79a72f6ULL;
};

template<class ContainerAllocator>
struct DataType< ::gazebo_video_monitor_msgs::StartGvmRecordingRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gazebo_video_monitor_msgs/StartGvmRecordingRequest";
  }

  static const char* value(const ::gazebo_video_monitor_msgs::StartGvmRecordingRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gazebo_video_monitor_msgs::StartGvmRecordingRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Start recording service for the Gazebo Video Monitor plugin\n"
"\n"
"bool disable_window\n"
"bool world_as_main_view\n"
;
  }

  static const char* value(const ::gazebo_video_monitor_msgs::StartGvmRecordingRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gazebo_video_monitor_msgs::StartGvmRecordingRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.disable_window);
      stream.next(m.world_as_main_view);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StartGvmRecordingRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gazebo_video_monitor_msgs::StartGvmRecordingRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gazebo_video_monitor_msgs::StartGvmRecordingRequest_<ContainerAllocator>& v)
  {
    s << indent << "disable_window: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.disable_window);
    s << indent << "world_as_main_view: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.world_as_main_view);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GAZEBO_VIDEO_MONITOR_MSGS_MESSAGE_STARTGVMRECORDINGREQUEST_H
