// Generated by gencpp from file gazebo_video_monitor_msgs/StartGmcmRecordingRequest.msg
// DO NOT EDIT!


#ifndef GAZEBO_VIDEO_MONITOR_MSGS_MESSAGE_STARTGMCMRECORDINGREQUEST_H
#define GAZEBO_VIDEO_MONITOR_MSGS_MESSAGE_STARTGMCMRECORDINGREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <gazebo_video_monitor_msgs/Strings.h>

namespace gazebo_video_monitor_msgs
{
template <class ContainerAllocator>
struct StartGmcmRecordingRequest_
{
  typedef StartGmcmRecordingRequest_<ContainerAllocator> Type;

  StartGmcmRecordingRequest_()
    : cameras()  {
    }
  StartGmcmRecordingRequest_(const ContainerAllocator& _alloc)
    : cameras(_alloc)  {
  (void)_alloc;
    }



   typedef  ::gazebo_video_monitor_msgs::Strings_<ContainerAllocator>  _cameras_type;
  _cameras_type cameras;





  typedef boost::shared_ptr< ::gazebo_video_monitor_msgs::StartGmcmRecordingRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gazebo_video_monitor_msgs::StartGmcmRecordingRequest_<ContainerAllocator> const> ConstPtr;

}; // struct StartGmcmRecordingRequest_

typedef ::gazebo_video_monitor_msgs::StartGmcmRecordingRequest_<std::allocator<void> > StartGmcmRecordingRequest;

typedef boost::shared_ptr< ::gazebo_video_monitor_msgs::StartGmcmRecordingRequest > StartGmcmRecordingRequestPtr;
typedef boost::shared_ptr< ::gazebo_video_monitor_msgs::StartGmcmRecordingRequest const> StartGmcmRecordingRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gazebo_video_monitor_msgs::StartGmcmRecordingRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gazebo_video_monitor_msgs::StartGmcmRecordingRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gazebo_video_monitor_msgs::StartGmcmRecordingRequest_<ContainerAllocator1> & lhs, const ::gazebo_video_monitor_msgs::StartGmcmRecordingRequest_<ContainerAllocator2> & rhs)
{
  return lhs.cameras == rhs.cameras;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gazebo_video_monitor_msgs::StartGmcmRecordingRequest_<ContainerAllocator1> & lhs, const ::gazebo_video_monitor_msgs::StartGmcmRecordingRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gazebo_video_monitor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gazebo_video_monitor_msgs::StartGmcmRecordingRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gazebo_video_monitor_msgs::StartGmcmRecordingRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gazebo_video_monitor_msgs::StartGmcmRecordingRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gazebo_video_monitor_msgs::StartGmcmRecordingRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gazebo_video_monitor_msgs::StartGmcmRecordingRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gazebo_video_monitor_msgs::StartGmcmRecordingRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gazebo_video_monitor_msgs::StartGmcmRecordingRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "176032962ec0f63db7c7bb19a86e7410";
  }

  static const char* value(const ::gazebo_video_monitor_msgs::StartGmcmRecordingRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x176032962ec0f63dULL;
  static const uint64_t static_value2 = 0xb7c7bb19a86e7410ULL;
};

template<class ContainerAllocator>
struct DataType< ::gazebo_video_monitor_msgs::StartGmcmRecordingRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gazebo_video_monitor_msgs/StartGmcmRecordingRequest";
  }

  static const char* value(const ::gazebo_video_monitor_msgs::StartGmcmRecordingRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gazebo_video_monitor_msgs::StartGmcmRecordingRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Start recording service for the Gazebo Multi Camera Monitor plugin\n"
"\n"
"gazebo_video_monitor_msgs/Strings cameras\n"
"\n"
"================================================================================\n"
"MSG: gazebo_video_monitor_msgs/Strings\n"
"string[] names\n"
;
  }

  static const char* value(const ::gazebo_video_monitor_msgs::StartGmcmRecordingRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gazebo_video_monitor_msgs::StartGmcmRecordingRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cameras);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StartGmcmRecordingRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gazebo_video_monitor_msgs::StartGmcmRecordingRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gazebo_video_monitor_msgs::StartGmcmRecordingRequest_<ContainerAllocator>& v)
  {
    s << indent << "cameras: ";
    s << std::endl;
    Printer< ::gazebo_video_monitor_msgs::Strings_<ContainerAllocator> >::stream(s, indent + "  ", v.cameras);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GAZEBO_VIDEO_MONITOR_MSGS_MESSAGE_STARTGMCMRECORDINGREQUEST_H
